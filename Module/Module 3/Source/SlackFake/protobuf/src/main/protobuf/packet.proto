syntax = "proto3";

package slackfake;

option java_multiple_files = true;
option java_package = "vng.training.w4.slackfake.protobuf";
option java_outer_classname = "PacketProtos";

message RequestPacket {

  message Register {
    string username = 1;
    string password = 2;
    string name = 3;
  }

  message Logout {
    string accessToken = 1;
  }

  message CreateChannel {
    string accessToken = 1;
    string channelName = 2;
  }

  message ListingChannel {
    string accessToken = 1;
  }

  message Login {
    string username = 1;
    string password = 2;
  }

  message JoinChannel {
    string access_token = 1;
    string channel_id = 2;
  }

  message SendMessageToChannel {
    string access_token = 1;
    string channel_id = 2;
    string content = 3;
    string type = 4;
  }

  message ReadMessageOfChannel {
    string access_token = 1;
    string channel_id = 2;
    int32 indexStart = 3;
    int32 indexEnd = 4;
  }

  message ReadMessage {
    string access_token = 1;
    string message_id = 2;
  }

  int32 packetId = 1;

  oneof data {
    Register register = 2;
    Logout logout = 3;
    CreateChannel createChannel = 4;
    ListingChannel listingChannel = 5;
    Login login = 6;
    JoinChannel joinChannel = 7;
    SendMessageToChannel sendMessageToChannel = 8;
    ReadMessage readMessage = 9;
    ReadMessageOfChannel readMessageOfChannel = 10;
  }

}

message ResponsePacket {

  message Register {
    enum Status {
      SUCCESS = 0;
      USERNAME_EXISTED = 1;
      INVALID_USERNAME = 2;
      INVALID_PASSWORD = 3;
    }

    Status status = 1;
    optional string message = 2;

  }

  message Logout {
    enum Status {
      SUCCESS = 0;
      INVALID_ACCESS_TOKEN = 1;
    }

    Status status = 1;
    optional string message = 2;
  }

  message CreateChannel {
    enum Status {
      SUCCESS = 0;
      INVALID_CHANNEL_NAME = 2;
      CHANNEL_EXISTED = 3;
    }

    Status status = 1;
    optional string message = 2;
    optional string channelId = 3;
  }

  message ListingChannel {
    enum Status {
      SUCCESS = 0;
    }

    Status status = 1;
    optional string message = 2;
    repeated string channelIds = 3;
    repeated string channelNames = 4;
  }

  message Login {
    enum Status {
      SUCCESS = 0;
      INVALID_USERNAME = 1;
      INVALID_PASSWORD = 2;
    }

    Status status = 1;
    optional string message = 2;
    optional string accessToken = 3;
  }

  message JoinChannel {
    enum Status {
      SUCCESS = 0;
      INVALID_CHANNEL_ID = 1;
      CHANNEL_NOT_EXISTED = 2;
    }

    Status status = 1;
    optional string message = 2;
  }

  message SendMessageToChannel {
    enum Status {
      SUCCESS = 0;
      INVALID_CHANNEL_ID = 1;
      CHANNEL_NOT_EXISTED = 2;
    }

    Status status = 1;
    optional string message = 2;
    optional string messageId = 3;
  }

  message ReadMessageOfChannel {
    int32 status_code = 1;
    string status = 2;
    repeated string message_ids = 3;
  }

  message ReadMessage {
    enum Status {
      SUCCESS = 0;
      INVALID_MESSAGE_ID = 1;
      MESSAGE_NOT_EXISTED = 2;
    }

    Status status = 1;
    optional string message = 2;
    optional string message_id = 3;
    optional string sender_id = 4;
    optional string channel_id = 5;
    optional string content = 6;
    optional string type = 7;
    optional string date = 8;
  }

  message NewMessage {
    enum Status {
      SUCCESS = 0;
      INVALID_MESSAGE_ID = 1;
      MESSAGE_NOT_EXISTED = 2;
    }

    Status status = 1;
    optional string message = 2;
    optional string message_id = 3;
    optional string sender_id = 4;
    optional string channel_id = 5;
    optional string content = 6;
    optional string type = 7;
    optional string date = 8;
  }

  message Unknown {
    string message = 1;
  }

  optional int32 packetId = 1;
  bool isAuthorized = 2;

  oneof response {
    Register registerResponse = 3;
    Logout logoutResponse = 4;
    CreateChannel createChannelResponse = 5;
    ListingChannel listingChannelResponse = 6;
    Login loginResponse = 7;
    JoinChannel joinChannelResponse = 8;
    SendMessageToChannel sendMessageToChannelResponse = 9;
    ReadMessage readMessageResponse = 10;
    NewMessage newMessageResponse = 11;
    ReadMessageOfChannel readMessageOfChannel = 12;
    Unknown unknownResponse = 13;
  }

}
